{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Super JavaScript Stylesheets (SJSS) - Angular 17 Edition","text":"<p>Welcome to Super JavaScript Stylesheets (SJSS) - a dynamic and responsive styling library designed for Angular applications. Seamlessly integrating with Angular 17, SJSS leverages the framework's latest advancements to make styling more intuitive, flexible, and maintainable. Whether you're building a small project or a large-scale enterprise application, SJSS is equipped to meet your styling needs with ease and efficiency.</p>"},{"location":"#purpose-of-sjss","title":"Purpose of SJSS","text":"<p>SJSS was created to simplify the process of applying styles in Angular applications. By combining the intuitive principles of JavaScript and CSS, SJSS introduces a powerful way to define and manage styles directly within your Angular components. This approach offers several benefits: - Ease of Use: Apply complex styles with simple and readable syntax. - Responsive Design Made Simple: Effortlessly create responsive layouts that adapt to different screen sizes. - Dynamic Styling: Update styles dynamically based on application state or user interactions. - Simplified Theming: Create and switch themes on the fly, providing users with a customizable and inclusive interface. - Standalone directive: SJSS is a standalone directive, so it can be used with any Angular component. - Enhanced Typography: Take control of your text with enhanced support for all HTML typography elements. - Optimized Performance: Built with Angular 17 signals for a fast and smooth user experience without the overhead of RxJS. - Lightweight and Fast: SJSS is incredibly lightweight, with the minified version under 8KB and the minified+gzipped version less than 3KB. - Built for Angular: SJSS is built specifically for Angular, ensuring compatibility and seamless integration with your Angular projects. - Familiar Syntax: SJSS uses a syntax that will be familiar to anyone who has used CSS or JavaScript, making it easy to learn and use.</p> <p>In the following sections, we'll dive deeper into how to install, set up, and use SJSS in your Angular projects. You'll also find detailed examples, best practices, and everything you need to harness the full potential of SJSS.</p>"},{"location":"#community-and-support","title":"Community and Support","text":"<p>Join the growing community of developers who are adopting Super JSS to push the boundaries of what's possible with Angular styling. Share your experiences, get support, and contribute to the project:</p> <ul> <li>Super JSS on GitHub</li> <li>Super JSS on npm</li> <li>Super JSS on StackBlitz</li> </ul>"},{"location":"#ready-to-start","title":"Ready to Start?","text":"<p>Embark on your journey to mastering Super JSS by exploring our comprehensive documentation:</p> <ul> <li>Installation Guide: Get started with the setup and integration of Super JSS into your Angular projects.</li> <li>Next steps, please refer to Super JSS on npm while this lib is updated to the latest version of angular 17</li> </ul> <p>Begin crafting beautiful, responsive, and dynamic user interfaces with unparalleled ease today.</p>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Articles by Richard on Medium</li> </ul>"},{"location":"#demos","title":"\ud83c\udfa8 Demos","text":"<ul> <li>Demo App: this Project can be seen in StackBlitz,</li> </ul>"},{"location":"#support","title":"\ud83d\udc96\u2615 Support","text":"<p>If you find Super JSS useful, consider supporting its development:</p> <ul> <li>\u2615 \u2615 \u2615 Buy me a coffee</li> <li>Support Super JSS</li> <li>Support Developer</li> </ul>"},{"location":"#contact","title":"\ud83d\udcec Contact","text":"<p>For inquiries, feedback, or issues, reach out at ricardo.santoyo@hotmail.com.</p>"},{"location":"basic-usage/","title":"Basic Usage","text":""},{"location":"basic-usage/#basic-usage","title":"Basic Usage","text":"<p>Super JSS simplifies the process of applying dynamic styles in Angular applications. Below is a guide to importing and using <code>SjDirective</code> and some basic examples to get you started.</p>"},{"location":"basic-usage/#importing-and-using-sjdirective","title":"Importing and Using <code>SjDirective</code>","text":"<ol> <li>Import the Directive:    To use Super JSS in your component, first import the <code>SjDirective</code> from the Super JSS package.</li> </ol> <pre><code>  import { SjDirective } from \"super-jss\";\n</code></pre> <ol> <li>Apply the Directive:     Apply the SjDirective to the element you want to style. The directive accepts a single object or an array of objects. The object keys are the CSS properties, and the values are the responsive CSS values. The directive will automatically apply the styles to the element.</li> </ol> <pre><code>  import {SjDirective} from \"super-jss\";\n    @Component({selector: 'app-demo',\n      template: `\n          &lt;div [sj]=\"{backgroundColor: '#aa5645', padding: '10px'}\"&gt;\n            Welcome to Super JSS!\n          &lt;/div&gt;\n        `\n    })\n    export class DemoComponent {}\n</code></pre> <p>The div will have varying padding sizes depending on the screen width, thanks to the responsive design capabilities of Super JSS.</p> <p>This section of the documentation provides a clear and straightforward guide for developers to start using Super JSS in their Angular projects. It demonstrates the ease with which they can apply dynamic and responsive styles, highlighting the library's flexibility and power.</p>"},{"location":"examples/","title":"SuperJSS Examples","text":"<p>Explore various examples to understand the capabilities and usage of SuperJSS.</p> <ul> <li>Demo App: this Project can be seen in StackBlitz,   github repo, or deployed to superjss,:   Show typography, theme handler updating palette, fonts, and breakpoints. or github repo:</li> </ul>"},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>StackBlitz: Basic Usage Example</p> <p>This example demonstrates the basic usage of SuperJSS to create responsive designs.</p>"},{"location":"examples/#flex-box-responsive-demo","title":"Flex-box Responsive Demo","text":"<p>StackBlitz: Flex-box Responsive Demo</p> <p>This is a show case of how to create a SuperJSS SJssStyles [sj] object to create responsive flex-box layouts.</p> <p>\u2190 Theming | Home </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>An existing Angular project.</li> <li>Node.js and npm installed on your machine.</li> </ul>"},{"location":"installation/#installation_1","title":"Installation","text":"<p>To begin, install the Super JSS library using npm:</p> <pre><code>npm i super-jss\n</code></pre>"},{"location":"installation/#integration","title":"Integration","text":""},{"location":"installation/#1-importing-the-directive-in-any-component","title":"1.  Importing the Directive in any component:","text":"<pre><code>import {SjDirective} from \"super-jss\";\n@Component({\n  standalone: true,\n  selector: 'app-demo',\n  template: `\n     &lt;div [sj]=\"{backgroundColor: '#aa5645', padding: '10px'}\"&gt;\n        Welcome to Super JSS!\n      &lt;/div&gt;    \n  `\n})\nexport class DemoComponent {}\n</code></pre> <p>\u2b05\ufe0f Previous: Welcome to Super JSS | Next: Styling \u27a1\ufe0f</p>"},{"location":"padding-margin/","title":"Shorthand Properties","text":"<p>Super JavaScript Stylesheets (SJSS) offers a flexible approach to styling in Angular applications. While you can use convenient shorthand properties for padding, margin, and border, SJSS also accepts traditional camelCase CSS properties, ensuring you can style elements in the way that works best for you.</p>"},{"location":"padding-margin/#quick-reference-table","title":"Quick Reference Table","text":"Shorthand Traditional CSS Property Description <code>px</code> <code>paddingLeft</code>, <code>paddingRight</code> Horizontal padding (left &amp; right) <code>py</code> <code>paddingTop</code>, <code>paddingBottom</code> Vertical padding (top &amp; bottom) <code>mx</code> <code>marginLeft</code>, <code>marginRight</code> Horizontal margin (left &amp; right) <code>my</code> <code>marginTop</code>, <code>marginBottom</code> Vertical margin (top &amp; bottom) <code>m</code> <code>margin</code> Margin on all sides <code>mt</code> <code>marginTop</code> Margin-top <code>ml</code> <code>marginLeft</code> Margin-left <code>mr</code> <code>marginRight</code> Margin-right <code>mb</code> <code>marginBottom</code> Margin-bottom <code>bx</code> <code>borderLeft</code>, <code>borderRight</code> Horizontal border (left &amp; right) <code>by</code> <code>borderTop</code>, <code>borderBottom</code> Vertical border (top &amp; bottom)"},{"location":"padding-margin/#shorthand-is-optional","title":"Shorthand is Optional","text":"<p>The use of shorthand properties in SJSS is entirely optional. You can choose to use them for a more concise style definition or stick with the traditional camelCase properties for padding, margin, and border. SJSS is designed to accommodate your preferred styling approach.</p>"},{"location":"padding-margin/#example-with-shorthand","title":"Example with Shorthand:","text":"<pre><code>  import {SjDirective} from \"super-jss\";\n    @Component({selector: 'app-demo',\n      template: `\n          &lt;div [sj]=\"{\n            py: '8px', // Vertical padding\n            mx: '10px', // Horizontal margin\n            by: '2px solid black' // Top and bottom border\n          }\"&gt;\n            Welcome to Super JSS!\n          &lt;/div&gt;\n        `\n    })\n    export class DemoComponent {}\n</code></pre>"},{"location":"padding-margin/#example-with-traditional-properties","title":"Example with Traditional Properties:","text":"<pre><code>  import {SjDirective} from \"super-jss\";\n    @Component({selector: 'app-demo',\n      template: `\n          &lt;div [sj]=\"{\n            paddingTop: '8px',\n            paddingBottom: '8px',\n            marginLeft: '10px',\n            marginRight: '10px',\n            borderTop: '2px solid black',\n            borderBottom: '2px solid black'\n          }\"&gt;\n            Welcome to Super JSS!\n          &lt;/div&gt;\n        `\n    })\n    export class DemoComponent {}\n</code></pre> <p>Both examples achieve the same styling effect. The choice between shorthand and traditional properties depends on your coding style and project requirements.</p>"},{"location":"responsive-style/","title":"Responsive Styling with SJSS","text":"<p>Super JavaScript Stylesheets (SJSS) provides a powerful and intuitive system for implementing responsive designs in Angular applications. Using a combination of predefined and customizable breakpoints, developers can easily define styles that adapt to different screen sizes.</p>"},{"location":"responsive-style/#breakpoint-upscaling-in-sjss","title":"Breakpoint Upscaling in SJSS","text":"<p>In SJSS, breakpoints are designed with an 'upscaling' approach. This means:</p> <ul> <li>Breakpoint Application: A style defined for a smaller breakpoint (e.g., xs) will apply to larger breakpoints until a new style is specified.</li> <li>Continuity Across Breakpoints: If a style is set for xs, it will continue to be effective for sm, md, lg, etc., until a larger breakpoint explicitly overrides it.</li> <li>Initial Definition: If the initial style is defined for a larger breakpoint (e.g., md or above), xs and sm will adopt this style unless explicitly overridden.</li> </ul>"},{"location":"responsive-style/#example-responsive-styling-in-a-component","title":"Example: Responsive Styling in a Component","text":"<p>Consider a scenario where you want your Angular component to adapt its style based on the screen size. SJSS makes this straightforward with responsive style properties. Here's an example:</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-responsive-demo',\n  template: `\n    &lt;div [sj]=\"{\n      p: {\n        xs: '5px',    // Padding for extra small screens\n        md: '10px',   // Padding for medium screens\n        lg: '15px'    // Padding for large screens\n        xl: '20px'   // Padding for extra large screens\n        xxl: '25px'  // Padding for extra extra large screens        \n      },\n      bg: {\n        xs: '#6699ff', // Background color for extra small screens\n        md: '#99ff66', // Background color for medium screens\n        lg: '#ff6699'  // Background color for large screens\n      }\n    }\"&gt;\n      Responsive SJSS Component!\n    &lt;/div&gt;\n  `\n})\nexport class ResponsiveDemoComponent {}\n</code></pre>"},{"location":"responsive-style/#updating-breakpoints","title":"Updating Breakpoints","text":"<p>To customize breakpoints in your Angular application, SJSS provides the SjThemeService, which is particularly powerful and user-friendly due to its use of Angular signals. This approach minimizes boilerplate and simplifies state management. Once set, these breakpoints are automatically recognized across the application through the sjDirective, ensuring a seamless and consistent responsive experience.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective } from \"super-jss\";\nimport { SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-responsive-demo',\n  template: `\n    &lt;div (click)=\"updateBreakpoints()\" [sj]=\"{p: { xs: '5px', md: '10px' }}\"&gt;\n      Responsive SJSS Component!\n    &lt;/div&gt;\n  `\n  })\n  export class ResponsiveDemoComponent {\n    //not recommended to change xs: unless your specifications does not care about mini devices, covered by xs\n    constructor(private sjTheme: SjThemeService) {}\n    updateBreakpoints(): void {\n      this.sjTheme.setBreakpoints({\n        sm: 660, // optional: a new breakpoint assiged to sm\n        md: 980, // optional a new breakpoint assiged to md\n        // add lg, xl, or xxl if needed.\n      });\n    }\n  }\n</code></pre> <p>This flexibility in defining and updating breakpoints allows developers to tailor responsive behavior to specific needs, ensuring optimal user experience across all devices.</p>"},{"location":"styling-shortcuts/","title":"SJSS Styling Shortcuts","text":"<p>Super JavaScript Stylesheets (SJSS) simplifies styling in Angular applications with a range of shorthand properties. These properties cover everything from padding and margin to flexbox layouts, making your code more concise and readable.</p>"},{"location":"styling-shortcuts/#example-using-sjss-shorthand-in-a-component","title":"Example: Using SJSS Shorthand in a Component","text":"<p>Consider a scenario where you want to style a div within an Angular component. Using SJSS shorthand properties, you can easily define the styles directly within the component:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-demo',\n    template: `\n      &lt;div [sj]=\"{\n        py: '10px',\n        px: '20px',\n        m: '20px',\n        b: '1px solid black',\n        d: 'flex',\n        fxJustify: 'center',\n        fxAItems: 'center',\n        bg: '#aa5645'\n      }\"&gt;\n        Welcome to Super JSS!\n      &lt;/div&gt;\n    `\n  })\n  export class DemoComponent {}\n</code></pre> <p>In this example, we're using SJSS to apply padding, margin, border, flexbox properties, and background color to a div. The shorthand properties like p for padding, m for margin, b for border, and bg for background color, demonstrate the simplicity and power of SJSS.</p> <p>Now, let's delve into the details of these shorthand properties.</p> <ul> <li>note: they are just shorthands, you can use the full css property in camelCase if you prefer.</li> </ul>"},{"location":"styling-shortcuts/#padding-and-margin","title":"Padding and Margin","text":"Shorthand CSS Property Description <code>p</code> <code>padding</code> Padding on all sides <code>pt</code> <code>paddingTop</code> Padding top <code>pr</code> <code>paddingRight</code> Padding right <code>pb</code> <code>paddingBottom</code> Padding bottom <code>pl</code> <code>paddingLeft</code> Padding left <code>m</code> <code>margin</code> Margin on all sides <code>mt</code> <code>marginTop</code> Margin top <code>mr</code> <code>marginRight</code> Margin right <code>mb</code> <code>marginBottom</code> Margin bottom <code>ml</code> <code>marginLeft</code> Margin left"},{"location":"styling-shortcuts/#sizes","title":"Sizes","text":"Shorthand CSS Property Description <code>w</code> <code>width</code> Width <code>h</code> <code>height</code> Height <code>minW</code> <code>minWidth</code> Minimum width <code>minH</code> <code>minHeight</code> Minimum height <code>maxW</code> <code>maxWidth</code> Maximum width <code>maxH</code> <code>maxHeight</code> Maximum height"},{"location":"styling-shortcuts/#borders","title":"Borders","text":"Shorthand CSS Property Description <code>b</code> <code>border</code> Border on all sides <code>bt</code> <code>borderTop</code> Border top <code>br</code> <code>borderRight</code> Border right <code>bb</code> <code>borderBottom</code> Border bottom <code>bl</code> <code>borderLeft</code> Border left <code>bs</code> <code>borderStyle</code> Border style <code>bw</code> <code>borderWidth</code> Border width <code>bc</code> <code>borderColor</code> Border color <code>brad</code> <code>borderRadius</code> Border radius <code>bx</code> <code>borderLeft</code>, <code>borderRight</code> Horizontal borders <code>by</code> <code>borderTop</code>, <code>borderBottom</code> Vertical borders"},{"location":"styling-shortcuts/#colors","title":"Colors","text":"Shorthand CSS Property Description <code>bg</code> <code>backgroundColor</code> Background color <code>c</code> <code>color</code> Text color"},{"location":"styling-shortcuts/#flexbox","title":"Flexbox","text":"Shorthand CSS Property Description <code>d</code> <code>display</code> Display property <code>fxDir</code> <code>flexDirection</code> Flex direction <code>fxWrap</code> <code>flexWrap</code> Flex wrap <code>fxFlow</code> <code>flexFlow</code> Flex flow <code>fxJustify</code> <code>justifyContent</code> Justify content <code>fxAItems</code> <code>alignItems</code> Align items <code>fxAContent</code> <code>alignContent</code> Align content <code>fxOrder</code> <code>order</code> Flex item order <code>fxGrow</code> <code>flexGrow</code> Flex grow <code>fxShrink</code> <code>flexShrink</code> Flex shrink <code>fxBasis</code> <code>flexBasis</code> Flex basis <code>fxASelf</code> <code>alignSelf</code> Align self"},{"location":"theming/","title":"Theming with Super JSS","text":"<p>Super JSS provides a robust theming system that allows you to define and switch themes dynamically in your Angular applications. Theming is essential for creating consistent styling across your application and for enabling features like dark mode.</p>"},{"location":"theming/#defining-a-theme","title":"Defining a Theme","text":"<p>You can define a theme as a set of style properties that can be applied globally across your application.</p> <pre><code>import { defaultThemeConfig, SJTheme } from 'super-jss';\n\nconst myTheme: SJTheme = defaultThemeConfig();\nmyTheme.palette.primary.main = '#007bff'; // Blue\nmyTheme.palette.secondary.main = '#dc3545'; // Red\n</code></pre> <p>Applying a Theme Once you have defined a theme, you can apply it using the sjTheme.set method.</p> <pre><code>import { sjTheme } from 'super-jss';\n\n// Apply the theme globally\nsjTheme.set(myTheme);\n</code></pre>"},{"location":"theming/#conclusion","title":"Conclusion","text":"<p>By following these steps, you can effectively override the default theme in SuperJSS, ensuring your application adheres to your specific design requirements. Remember, responsibly managing your subscriptions by unsubscribing in the <code>ngOnDestroy</code> method is crucial to prevent memory leaks and maintain optimal performance in your Angular applications.</p> <p>\u2190 Typography | Home | Examples \u2192</p>"},{"location":"typography/","title":"Typography","text":"<p>Super JSS provides a robust theming mechanism for typography. By simply adding the <code>sj</code> directive to your HTML tags, you can apply predefined styles from the theme to your text elements. This ensures consistency and a professional look across your application.</p>"},{"location":"typography/#usage","title":"Usage","text":"<p>You can use any HTML tag from H1 to H6, P, or span, and add the <code>sj</code> directive to apply the predefined typography styles:</p> <pre><code>&lt;h1 [sj]=\"\"&gt;Hello world H1&lt;/h1&gt;\n&lt;h2 [sj]=\"\"&gt;Hello world H2&lt;/h2&gt;\n&lt;h3 [sj]=\"\"&gt;Hello world H3&lt;/h3&gt;\n&lt;h4 [sj]=\"\"&gt;Hello world H4&lt;/h4&gt;\n&lt;h5 [sj]=\"\"&gt;Hello world H5&lt;/h5&gt;\n&lt;h6 [sj]=\"\"&gt;Hello world H6&lt;/h6&gt;\n&lt;p [sj]=\"\"&gt;Hello world P&lt;/p&gt;\n&lt;span [sj]=\"\"&gt;Hello world span&lt;/span&gt;\n&lt;strong [sj]=\"\"&gt;Hello world span&lt;/strong&gt;\n</code></pre> <p>These styles are defined in the SJssTheme interface under the typography property. Each tag (H1 to H6, P, span, etc.) corresponds to a specific style definition. By using the sj directive, you're telling Super JSS to apply the associated style from the theme to that tag.</p> <p>\u2190 Responsive Styles | Home | Theming \u2192</p>"}]}