{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Super JavaScript Stylesheets (SJSS) - Angular 17 Edition","text":"<p>Welcome to Super JavaScript Stylesheets (SJSS) - a dynamic and responsive styling library designed for Angular applications. Seamlessly integrating with Angular 17, SJSS leverages the framework's latest advancements to make styling more intuitive, flexible, and maintainable. Whether you're building a small project or a large-scale enterprise application, SJSS is equipped to meet your styling needs with ease and efficiency.</p>"},{"location":"#purpose-of-sjss","title":"Purpose of SJSS","text":"<p>SJSS was created to simplify the process of applying styles in Angular applications. By combining the intuitive principles of JavaScript and CSS, SJSS introduces a powerful way to define and manage styles directly within your Angular components. This approach offers several benefits:</p> <ul> <li>Ease of Use: Apply complex styles with simple and readable syntax.</li> <li>Responsive Design Made Simple: Effortlessly create responsive layouts that adapt to different screen sizes.</li> <li>Dynamic Styling: Update styles dynamically based on application state or user interactions.</li> <li>Simplified Theming: Create and switch themes on the fly, providing users with a customizable and inclusive interface.</li> <li>Standalone directive: SJSS is a standalone directive, so it can be used with any Angular component.</li> <li>Enhanced Typography: Take control of your text with enhanced support for all HTML typography elements.</li> <li>Optimized Performance: Built with Angular 17 signals for a fast and smooth user experience without the overhead of RxJS.</li> <li>Lightweight and Fast: SJSS is incredibly lightweight, with the minified version under 8KB and the minified+gzipped version less than 3KB.</li> <li>Built for Angular: SJSS is built specifically for Angular, ensuring compatibility and seamless integration with your Angular projects.</li> <li>Familiar Syntax: SJSS uses a syntax that will be familiar to anyone who has used CSS or JavaScript, making it easy to learn and use.</li> </ul>"},{"location":"#community-and-support","title":"Community and Support","text":"<p>Join the growing community of developers who are adopting Super JSS to push the boundaries of what's possible with Angular styling. Share your experiences, get support, and contribute to the project:</p> <ul> <li>Super JSS on GitHub</li> <li>Super JSS on npm</li> <li>Super JSS on StackBlitz</li> </ul>"},{"location":"#ready-to-start","title":"Ready to Start?","text":"<p>Embark on your journey to mastering Super JSS by exploring our comprehensive documentation:</p> <ul> <li>Installation Guide: Get started with the setup and integration of Super JSS into your Angular projects.</li> <li>Next steps, please refer to Super JSS on npm while this lib is updated to the latest version of angular 17</li> </ul> <p>Begin crafting beautiful, responsive, and dynamic user interfaces with unparalleled ease today.</p>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Articles by Richard on Medium</li> </ul>"},{"location":"#demos","title":"\ud83c\udfa8 Demos","text":"<ul> <li>Demo App: this Project can be seen in StackBlitz,</li> </ul>"},{"location":"#support","title":"\ud83d\udc96\u2615 Support","text":"<p>If you find Super JSS useful, consider supporting its development:</p> <ul> <li>\u2615 \u2615 \u2615 Buy me a coffee</li> </ul>"},{"location":"#contact","title":"\ud83d\udcec Contact","text":"<p>For inquiries, feedback, or issues, reach out at ricardo.santoyo@hotmail.com.</p> <p>[Previous: Next: Installation Guide</p>"},{"location":"basic-usage/","title":"Basic Usage of Super JavaScript Stylesheets (SJSS)","text":"<p>Super JSS streamlines the application of dynamic styles in Angular applications. This guide provides a detailed overview of importing and using the <code>SjDirective</code>, complemented by basic examples to illustrate its practical application.</p>"},{"location":"basic-usage/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Importing <code>SjDirective</code></li> <li>Applying <code>SjDirective</code></li> <li>Responsive Styling Example</li> <li>Further Resources</li> </ol>"},{"location":"basic-usage/#importing-sjdirective","title":"Importing <code>SjDirective</code>","text":""},{"location":"basic-usage/#import-the-directive","title":"Import the Directive","text":"<p>To integrate Super JSS into your Angular component, start by importing <code>SjDirective</code>:</p> <pre><code>import { SjDirective } from \"super-jss\";\n</code></pre>"},{"location":"basic-usage/#applying-sjdirective","title":"Applying <code>SjDirective</code>","text":""},{"location":"basic-usage/#apply-the-directive","title":"Apply the Directive","text":"<p><code>SjDirective</code> can be applied to any HTML element in your Angular template. It accepts either a single object or an array of objects for style definitions:</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  selector: 'app-demo',\n  template: `\n    &lt;div [sj]=\"{backgroundColor: '#aa5645', padding: '10px'}\"&gt;\n      Welcome to Super JSS!\n    &lt;/div&gt;\n  `\n})\nexport class DemoComponent {}\n</code></pre>"},{"location":"basic-usage/#responsive-styling-example","title":"Responsive Styling Example","text":"<p>In the above example, the <code>div</code> element is styled with a background color and padding. These styles are dynamically applied and responsive, showcasing the power and flexibility of Super JSS.</p>"},{"location":"basic-usage/#further-resources","title":"Further Resources","text":"<p>For more information and advanced examples of using Super JSS, explore the following resources: - Super JSS on npm: Detailed package information and installation guide. - Super JSS Demos on StackBlitz: Interactive examples to understand Super JSS features better.</p> <p>\u2b05\ufe0f Previous: Installation | Next: styling shortcuts \u27a1\ufe0f</p>"},{"location":"colors/","title":"Color Palette with SJSS","text":"<p>Super JavaScript Stylesheets (SJSS) provides a flexible and powerful system for managing color palettes in Angular applications. Utilizing the SJSS color palette, you can define and apply a consistent color scheme throughout your app.</p>"},{"location":"colors/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Using the Color Palette</li> <li>Personalizing the Color Palette</li> <li>Color Palette Default Reference</li> </ol>"},{"location":"colors/#using-the-color-palette","title":"Using the Color Palette","text":"<p>In SJSS, colors can be accessed and used within components, either through direct styling or as part of responsive and shorthand styles. Here's an example of how to use the color palette in a component:</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-colorful-component',\n    template: `\n      &lt;div [sj]=\"{ m: '2rem', p: '1rem', bg: 'blue' }\"&gt;\n       &lt;div [sj]=\"{ bg: 'orange.300', color: 'orange.contrast' }\"&gt;\n        This is a colorful component!\n       &lt;/div&gt;        \n      &lt;/div&gt;\n    `\n  })\n  export class ColorfulComponent {}\n\n</code></pre> <p>in this example, we're using the color palette to apply a background color to a div. We're also using the color palette to apply a background color and text color to a nested div.</p>"},{"location":"colors/#personalize-the-color-palette","title":"Personalize the Color Palette","text":"<p>The color palette can be accessed and modified through the SjThemeService. This service provides a powerful and user-friendly way to customize the color palette in your Angular application. Once set, these colors are automatically recognized across the application through the sjDirective, ensuring a seamless and consistent experience.</p> <p>any palette item is defined as</p> <pre><code>  {\n    50: string,\n    100: string,\n    200: string,\n    300: string,\n    400: string,\n    500: string, // Default shade\n    600: string,\n    700: string,\n    800: string,\n    900: string,\n    contrast: string\n  } \n</code></pre> <p>to update a color, please use the <code>updatePalette</code> method from the <code>SjThemeService</code> as follows:</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-colorful-component',\n  template: `\n    &lt;div (click)=\"updateColor()\" [sj]=\"{ m: '2rem', p: '1rem', bg: 'blue' }\"&gt;\n     &lt;div [sj]=\"{ bg: 'orange.300', color: 'orange.contrast' }\"&gt;\n      This is a colorful component!\n     &lt;/div&gt;        \n    &lt;/div&gt;\n  `\n})\n\nexport class PaletteDemoComponent {\n  //not recommended to change xs: unless your specifications does not care about mini devices, covered by xs\n  constructor(private sjTheme: SjThemeService) {}\n  updateColor(): void {\n    this.sjTheme.setColors(\n      pink: {\n        50: '#dc3545',\n        100: '#d8bbd0',\n        200: '#d48fb1',\n        300: '#fd06292',\n        400: '#fc407a',\n        500: '#f91e63',\n        600: '#a81b60',\n        700: '#82185b',\n        800: '#8d1457',\n        900: '#680e4f',\n        contrast: '#d59242'\n      }\n    )\n  }\n}\n\n</code></pre>"},{"location":"colors/#color-palette-default-reference","title":"Color Palette Default Reference","text":"Color 50 100 200 300 400 500 (default) 600 700 800 900 Contrast Blue #E3F2FD #BBDEFB #90CAF9 #64B5F6 #42A5F5 #3498DB #2E86C1 #1976D2 #1565C0 #0D47A1 #c26d29 Indigo #E8EAF6 #C5CAE9 #9FA8DA #7986CB #5C6BC0 #3F51B5 #3949AB #303F9F #283593 #1A237E #f59242 Purple #F3E5F5 #E1BEE7 #CE93D8 #BA68C8 #AB47BC #9C27B0 #8E24AA #7B1FA2 #6A1B9A #4A148C #f59242 Pink #FCE4EC #F8BBD0 #F48FB1 #F06292 #EC407A #E91E63 #D81B60 #C2185B #AD1457 #880E4F #f59242 Red #FFEBEE #FFCDD2 #EF9A9A #E57373 #EF5350 #E74C3C #E53935 #D32F2F #C62828 #771010 #f59242 Orange #FFF3E0 #FFE0B2 #FFCC80 #FFB74D #FFA726 #F39C12 #FB8C00 #F57C00 #EF6C00 #bb4600 #f59242 Yellow #FFFDE7 #FFF9C4 #FFF59D #FFF176 #FFEE58 #FFEB3B #FDD835 #FBC02D #F9A825 #F57F17 #f59242 Green #E8F5E9 #C8E6C9 #A5D6A7 #81C784 #66BB6A #4CAF50 #43A047 #388E3C #2E7D32 #1B5E20 #f59242 Teal #E0F2F1 #B2DFDB #80CBC4 #4DB6AC #26A69A #009688 #00897B #00796B #00695C #004D40 #f59242 Cyan #E0F7FA #B2EBF2 #80DEEA #4DD0E1 #26C6DA #00BCD4 #00ACC1 #0097A7 #00838F #006064 #f59242 Gray #FAFAFA #F5F5F5 #EEEEEE #E0E0E0 #BDBDBD #9E9E9E #757575 #616161 #424242 #212121 #f59242 Black - - - - - #000000 - - - - - <p>\u2b05\ufe0f Previous: Styling Shortcuts | Next: Spacing \u27a1\ufe0f</p>"},{"location":"examples/","title":"SuperJSS Examples","text":"<p>Explore various examples to understand the capabilities and usage of SuperJSS.</p> <ul> <li>Demo App: this Project can be seen in StackBlitz,   github repo, or deployed to superjss,:   Show typography, theme handler updating palette, fonts, and breakpoints. or github repo:</li> </ul>"},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>StackBlitz: Basic Usage Example</p> <p>This example demonstrates the basic usage of SuperJSS to create responsive designs.</p>"},{"location":"examples/#flex-box-responsive-demo","title":"Flex-box Responsive Demo","text":"<p>StackBlitz: Flex-box Responsive Demo</p> <p>This is a show case of how to create a SuperJSS SJssStyles [sj] object to create responsive flex-box layouts.</p> <p>\u2190 Theming | Home </p>"},{"location":"installation/","title":"Installation of Super JavaScript Stylesheets (SJSS)","text":"<p>This section provides a step-by-step guide on installing and integrating Super JavaScript Stylesheets (SJSS) into your Angular projects, ensuring a smooth setup process.</p>"},{"location":"installation/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Installation Steps</li> <li>Integration</li> <li>Importing the Directive</li> </ol>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with the installation of Super JavaScript Stylesheets (SJSS), make sure your development environment is ready:</p> <ul> <li> <p>Angular Project: An existing Angular project is required. If you don't have one, you can start by creating a new Angular project following the Angular documentation.</p> </li> <li> <p>Node.js and npm: Your machine must have Node.js and npm (Node Package Manager) installed. npm, which is essential for managing JavaScript packages, comes bundled with Node.js. You can verify the installation by running <code>node -v</code> and <code>npm -v</code> in your terminal.</p> </li> <li> <p>Super JSS Library: Familiarize yourself with the Super JSS library on npm. For detailed information, visit the Super JSS npm package page.</p> </li> </ul> <p>This update provides a clearer path for users to understand and prepare their environment for SJSS, including direct access to relevant resources.</p>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<p>To install the Super JSS library, use the following npm command:</p> <pre><code>npm i super-jss\n</code></pre> <p>This command installs the latest version of Super JSS from npm.</p>"},{"location":"installation/#integration","title":"Integration","text":""},{"location":"installation/#importing-the-directive","title":"Importing the Directive","text":"<p>To integrate Super JSS into your Angular components, follow these steps:</p> <ol> <li>Import the SJSS Directive:</li> </ol> <p>First, import the <code>SjDirective</code> from the Super JSS package.</p> <pre><code>```typescript\nimport { SjDirective } from \"super-jss\";\n```\n</code></pre> <ol> <li>Applying the Directive:</li> </ol> <p>In your Angular component, apply the SJSS directive as shown below. This example sets the background color and padding for a div element.</p> <pre><code>```typescript\n@Component({\n  standalone: true,\n  selector: 'app-demo',\n  template: `\n    &lt;div [sj]=\"{backgroundColor: '#aa5645', padding: '10px'}\"&gt;\n      Welcome to Super JSS!\n    &lt;/div&gt;    \n  `\n})\nexport class DemoComponent {}\n```\n</code></pre> <p>For a live demonstration of Super JSS in action, visit our StackBlitz example.</p> <p>\u2b05\ufe0f Previous: Welcome to Super JSS | Next: Basic Usage \u27a1\ufe0f</p>"},{"location":"palette/","title":"Palette in SJSS","text":""},{"location":"palette/#introduction-to-palette-theming","title":"Introduction to Palette Theming","text":"<p>SJSS uses a theming approach that allows you to define semantic color sets, like primary, secondary, and tertiary, using the provided color palette. This approach ensures consistency in the application's color scheme and enhances the ease of applying styles.</p>"},{"location":"palette/#example-demonstrating-palette-with-shorthand-styles","title":"Example: Demonstrating Palette with Shorthand Styles","text":"<p>It's palette's flexibility allows for easy styling of components with various color themes. Here's an enhanced example showing the use of the palette along with shorthand styles for padding, margin, and more:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-themed-component',\n    template: `\n      &lt;div [sj]=\"{ bg: 'primary.main', color: 'primary.contrast', p: 2, m: 1}\"&gt;\n        Primary Themed Content\n        &lt;div [sj]=\"{ bg: 'secondary.light', color: 'secondary.contrast', p: 1, m: 0.5 }\"&gt;\n          Secondary Light Theme\n        &lt;/div&gt;\n        &lt;div [sj]=\"{ bg: 'success.main', color: 'success.contrast', p: 1, m: 0.5 }\"&gt;\n          Success Theme\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `\n  })\n  export class ThemedComponent {}\n\n</code></pre> <p>In this example: - The outer div is styled with the primary color theme, along with padding (p) and margin (m) for spacing. - The inner divs use the secondary and success color themes, each with their own padding and margin for clear visual separation.</p>"},{"location":"palette/#customizing-the-palette","title":"Customizing the Palette","text":""},{"location":"palette/#structure-and-default-sets","title":"Structure and Default Sets","text":"<p>The default SJSS palette includes semantic color sets like primary, secondary, and success. Each set is structured with main, light, dark, and contrast shades for flexibility.</p>"},{"location":"palette/#updating-the-palette","title":"Updating the Palette","text":"<p>To customize the color sets according to your branding or design preferences:</p> <ol> <li> <p>Accessing the Palette: Utilize the SjThemeService to work with the current palette.</p> </li> <li> <p>Modifying Colors: Use setColors in SjThemeService to update the color sets:</p> </li> </ol> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-themed-component',\n  template: `\n    &lt;div (click)=\"updateColor()\" [sj]=\"{ bg: 'primary.main', color: 'primary.contrast', p: 2, m: 1}\"&gt;\n      Primary Themed Content\n    &lt;/div&gt;\n  `\n})\nexport class ThemedComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateColor(): void {\n    this.sjTheme.setColors({\n      primary: {\n        main: '#ffdb58',\n        light: '#ffecb3',\n        dark: '#ffca28',\n        contrast: '#000000'\n      },\n      // colors from the library may be used as well      \n      tertiary: {\n        main: this.sjTheme.colors.purple,\n        light: this.sjTheme.colors.purple[300],\n        dark: this.sjTheme.colors.purple[700],\n        contrast: this.sjTheme.colors.purple.contrast\n      }\n    });\n  }\n}\n</code></pre> <p>This example showcases how SJSS's theming and shorthand styles enable developers to create visually appealing and consistent designs with ease.</p>"},{"location":"palette/#default-palette-configuration","title":"Default Palette Configuration","text":"<p>The default palette configuration is as follows:</p> theme.palette. main light dark contrast primary blue[500] blue[300] blue[700] yellow[500] secondary orange[500] orange[300] orange[700] blue[300] tertiary red[500] red[300] red[700] white success green[500] green[300] green[700] gray[50] info cyan[500] cyan[300] cyan[700] gray[50] warning orange[500] orange[300] orange[700] gray[50] error red[500] red[300] red[700] gray[50] dark gray[800] gray[600] black gray[50] neutral gray[500] gray[300] gray[700] gray[50] light gray[200] gray[50] gray[400] gray[900]"},{"location":"responsive-style/","title":"Responsive Styling with SJSS","text":"<p>Super JavaScript Stylesheets (SJSS) offers a powerful and intuitive approach to implementing responsive designs in Angular applications. Through a system of breakpoints, developers can create styles that adapt seamlessly to various screen sizes.</p>"},{"location":"responsive-style/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Breakpoint Upscaling in SJSS</li> <li>Responsive Styling Example</li> <li>Updating Breakpoints</li> <li>Further Learning Resources</li> </ol>"},{"location":"responsive-style/#breakpoint-upscaling-in-sjss","title":"Breakpoint Upscaling in SJSS","text":"<p>SJSS employs an 'upscaling' approach for breakpoints:</p> <ul> <li>Breakpoint Application: Learn more about breakpoint application</li> <li>Continuity Across Breakpoints: Understand breakpoint continuity</li> <li>Initial Definition: Explore initial style definitions</li> </ul>"},{"location":"responsive-style/#responsive-styling-example","title":"Responsive Styling Example","text":"<p>Here's how to apply responsive styling in an Angular component using SJSS:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-responsive-demo',\n    template: `\n      &lt;div [sj]=\"{\n        p: {\n          xs: '5px',    // Padding for extra small screens\n          md: '10px',   // Padding for medium screens\n          lg: '15px'    // Padding for large screens\n          xl: '20px'   // Padding for extra large screens\n          xxl: '25px'  // Padding for extra extra large screens        \n        },\n        bg: {\n          xs: '#6699ff', // Background color for extra small screens\n          md: '#99ff66', // Background color for medium screens\n          lg: '#ff6699'  // Background color for large screens\n        }\n      }\"&gt;\n        Responsive SJSS Component!\n      &lt;/div&gt;\n    `\n  })\n  export class ResponsiveDemoComponent {}\n</code></pre> <p>For interactive examples and more, visit SJSS on StackBlitz.</p>"},{"location":"responsive-style/#updating-breakpoints","title":"Updating Breakpoints","text":"<p>To customize breakpoints, use the <code>SjThemeService</code> in SJSS, which is particularly powerful and user-friendly due to its use of Angular signals. This approach minimizes boilerplate and simplifies state management. Once set, these breakpoints are automatically recognized across the application through the sjDirective, ensuring a seamless and consistent responsive experience.</p> <pre><code>  @Component({\n    standalone: true,\n    selector: 'app-responsive-demo',\n    template: `\n      &lt;div (click)=\"updateBreakpoints()\" [sj]=\"{p: { xs: '5px', md: '10px' }}\"&gt;\n        Responsive SJSS Component!\n      &lt;/div&gt;\n    `\n  })\n  export class ResponsiveDemoComponent {\n    //not recommended to change xs: unless your specifications does not care about mini devices, covered by xs\n    constructor(private sjTheme: SjThemeService) {}\n    updateBreakpoints(): void {\n      this.sjTheme.setBreakpoints({\n        sm: 660, // optional: a new breakpoint assiged to sm\n        md: 980, // optional a new breakpoint assiged to md\n        // add lg, xl, or xxl if needed.\n      });\n    }\n  }\n</code></pre> <p>This example demonstrates how to update breakpoints in SJSS. For more examples, visit SJSS on StackBlitz.</p>"},{"location":"responsive-style/#further-learning-resources","title":"Further Learning Resources","text":"<p>For additional information and examples on responsive styling with SJSS, explore the following resources: - SJSS on npm: Detailed package information and installation guide. - Interactive Examples on StackBlitz: Explore hands-on examples and see SJSS in action.</p>"},{"location":"responsive-style/#previous-styling-shortcuts-next-colors","title":"\u2b05\ufe0f Previous: Styling Shortcuts | Next: Colors \u27a1\ufe0f","text":""},{"location":"spacing/","title":"Spacing in SJSS","text":""},{"location":"spacing/#introduction-to-spacing","title":"Introduction to Spacing","text":"<p>In SJSS, spacing is a versatile feature that allows for consistent and scalable space management throughout your application. Spacing can be applied to various properties like padding, margin, gap, and others, using a simple numeric factor system.</p>"},{"location":"spacing/#default-spacing-configuration","title":"Default Spacing Configuration","text":"<p>The default spacing in SJSS is defined as a function that converts a numeric factor into rem units. This approach ensures uniformity and ease of adjustments across different UI components.</p>"},{"location":"spacing/#using-spacing","title":"Using Spacing","text":"<p>To apply spacing in SJSS, you can use shorthand properties with numeric factors. For example, { p: 1 } translates to padding of 1 rem.</p> <pre><code>@Component({\n  template: `&lt;div [sj]=\"{ p: 1, m: 2 }\"&gt;Content with padding and margin&lt;/div&gt;`\n})\n</code></pre> <p>In this example, p: 1 applies 1 rem of padding, and m: 2 applies 2 rem of margin to the element.</p>"},{"location":"spacing/#customizing-spacing","title":"Customizing Spacing","text":"<p>You can customize the spacing scale to fit the design needs of your application.</p>"},{"location":"spacing/#updating-spacing","title":"Updating Spacing","text":"<p>The spacing can be updated using the setSpacing method. This method allows you to redefine how the numeric factors are translated into actual spacing values.</p> <pre><code>  this.th.setSpacing((factor: number) =&gt; `${10 * factor}px`);\n</code></pre> <p>In this example, the spacing factor is scaled down, so 1 now represents 0.5 rem.</p>"},{"location":"spacing/#best-practices","title":"Best Practices","text":"<p>Use consistent spacing units across your application to maintain a harmonious layout. Choose spacing values that align with your design system or UI guidelines. Consider using multiples of a base unit (like 0.25 rem, 0.5 rem, etc.) for a harmonious and scalable spacing system. By utilizing SJSS's spacing system, developers can ensure consistent and easy-to-manage spacing throughout their Angular applications, with the flexibility to adjust it as per their design requirements.</p>"},{"location":"styling-shortcuts/","title":"SJSS Styling Shortcuts","text":"<p>Super JavaScript Stylesheets (SJSS) simplifies styling in Angular applications with a range of shorthand properties, covering everything from padding and margin to flexbox layouts.</p>"},{"location":"styling-shortcuts/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Example Usage in a Component</li> <li>Shorthand Properties</li> <li>Padding and Margin</li> <li>Sizes</li> <li>Borders</li> <li>Colors</li> <li>Flexbox</li> <li>Interactive Examples</li> </ol>"},{"location":"styling-shortcuts/#example-usage-in-a-component","title":"Example Usage in a Component","text":"<p>Consider styling a <code>div</code> within an Angular component using SJSS shorthand properties:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-demo',\n    template: `\n        &lt;div [sj]=\"{\n          py: '10px',\n          px: '20px',\n          m: '20px',\n          b: '1px solid black',\n          d: 'flex',\n          fxJustify: 'center',\n          fxAItems: 'center',\n          bg: '#aa5645'\n        }\"&gt;\n          Welcome to Super JSS!\n        &lt;/div&gt;\n      `\n})\nexport class DemoComponent {}\n</code></pre> <p>For interactive examples and more detailed usage, visit SJSS on StackBlitz.</p> <p>Now, let's delve into the details of these shorthand properties.</p> <ul> <li>note: they are just shorthands, you can use the full css property in camelCase if you prefer.</li> </ul>"},{"location":"styling-shortcuts/#padding-and-margin","title":"Padding and Margin","text":"Shorthand CSS Property Description <code>p</code> <code>padding</code> Padding on all sides <code>pt</code> <code>paddingTop</code> Padding top <code>pr</code> <code>paddingRight</code> Padding right <code>pb</code> <code>paddingBottom</code> Padding bottom <code>pl</code> <code>paddingLeft</code> Padding left <code>m</code> <code>margin</code> Margin on all sides <code>mt</code> <code>marginTop</code> Margin top <code>mr</code> <code>marginRight</code> Margin right <code>mb</code> <code>marginBottom</code> Margin bottom <code>ml</code> <code>marginLeft</code> Margin left"},{"location":"styling-shortcuts/#sizes","title":"Sizes","text":"Shorthand CSS Property Description <code>w</code> <code>width</code> Width <code>h</code> <code>height</code> Height <code>minW</code> <code>minWidth</code> Minimum width <code>minH</code> <code>minHeight</code> Minimum height <code>maxW</code> <code>maxWidth</code> Maximum width <code>maxH</code> <code>maxHeight</code> Maximum height"},{"location":"styling-shortcuts/#borders","title":"Borders","text":"Shorthand CSS Property Description <code>b</code> <code>border</code> Border on all sides <code>bt</code> <code>borderTop</code> Border top <code>br</code> <code>borderRight</code> Border right <code>bb</code> <code>borderBottom</code> Border bottom <code>bl</code> <code>borderLeft</code> Border left <code>bs</code> <code>borderStyle</code> Border style <code>bw</code> <code>borderWidth</code> Border width <code>bc</code> <code>borderColor</code> Border color <code>brad</code> <code>borderRadius</code> Border radius <code>bx</code> <code>borderLeft</code>, <code>borderRight</code> Horizontal borders <code>by</code> <code>borderTop</code>, <code>borderBottom</code> Vertical borders"},{"location":"styling-shortcuts/#colors","title":"Colors","text":"Shorthand CSS Property Description <code>bg</code> <code>backgroundColor</code> Background color <code>c</code> <code>color</code> Text color"},{"location":"styling-shortcuts/#flexbox","title":"Flexbox","text":"Shorthand CSS Property Description <code>d</code> <code>display</code> Display property <code>fxDir</code> <code>flexDirection</code> Flex direction <code>fxWrap</code> <code>flexWrap</code> Flex wrap <code>fxFlow</code> <code>flexFlow</code> Flex flow <code>fxJustify</code> <code>justifyContent</code> Justify content <code>fxAItems</code> <code>alignItems</code> Align items <code>fxAContent</code> <code>alignContent</code> Align content <code>fxOrder</code> <code>order</code> Flex item order <code>fxGrow</code> <code>flexGrow</code> Flex grow <code>fxShrink</code> <code>flexShrink</code> Flex shrink <code>fxBasis</code> <code>flexBasis</code> Flex basis <code>fxASelf</code> <code>alignSelf</code> Align self <p>\u2b05\ufe0f Previous: Basic Usage | Next: Responsive Styling \u27a1\ufe0f</p>"},{"location":"theming/","title":"Theming with Super JSS","text":"<p>Super JSS provides a robust theming system that allows you to define and switch themes dynamically in your Angular applications. Theming is essential for creating consistent styling across your application and for enabling features like dark mode.</p>"},{"location":"theming/#defining-a-theme","title":"Defining a Theme","text":"<p>You can define a theme as a set of style properties that can be applied globally across your application.</p> <pre><code>import { defaultThemeConfig, SJTheme } from 'super-jss';\n\nconst myTheme: SJTheme = defaultThemeConfig();\nmyTheme.palette.primary.main = '#007bff'; // Blue\nmyTheme.palette.secondary.main = '#dc3545'; // Red\n</code></pre> <p>Applying a Theme Once you have defined a theme, you can apply it using the sjTheme.set method.</p> <pre><code>import { sjTheme } from 'super-jss';\n\n// Apply the theme globally\nsjTheme.set(myTheme);\n</code></pre>"},{"location":"theming/#conclusion","title":"Conclusion","text":"<p>By following these steps, you can effectively override the default theme in SuperJSS, ensuring your application adheres to your specific design requirements. Remember, responsibly managing your subscriptions by unsubscribing in the <code>ngOnDestroy</code> method is crucial to prevent memory leaks and maintain optimal performance in your Angular applications.</p> <p>\u2190 Typography | Home | Examples \u2192</p>"},{"location":"typography/","title":"Typography in SJSS","text":"<p>SJSS offers a robust typography system that allows for the customization of text styles across various HTML elements.</p>"},{"location":"typography/#using-typography-in-components","title":"Using Typography in Components","text":"<p>To apply these typography styles in SJSS, you can use the [sj] directive in your Angular components. For example:</p> <pre><code>&lt;p [sj]&gt;This paragraph will use SJSS default styling.&lt;/p&gt;\n&lt;p [sj]=\"{ c: 'primary.main' }\"&gt;This paragraph will have the primary color.&lt;/p&gt;\n\n</code></pre> <p>In these examples, the first paragraph will be rendered with the default SJSS styling for <p> elements. The second paragraph will additionally have a text color corresponding to the primary color from the palette.</p>"},{"location":"typography/#typography-default-styles","title":"Typography Default Styles","text":"<p>SJSS provides default styles for various HTML elements. These styles are defined in the SjThemeService and can be customized as per your application's needs. The following table lists the default typography styles in SJSS:</p> Element Font-Size (xs/md) Font-Weight Line-Height Default 1rem Normal 1.6 H1 2.5rem / 3.5rem 600 4 H2 2rem / 3rem 600 3.5 H3 1.75rem / 2.5rem 600 3 H4 1.5rem / 2rem 600 2 H5 1.25rem / 1.75rem 600 2 H6 1rem / 1.25rem 600 1.5 P 1rem Normal 1.4 SPAN 0.9rem Normal 1.2 STRONG 1rem Bold 1.2 BODY 1rem Normal 1.2 CAPTION 0.8rem Normal 1.2 <p>This table provides a comprehensive guide to the default typography settings in SJSS. Users can rely on this data to understand how text will be styled by default and make informed decisions about customizing these styles.</p>"},{"location":"typography/#customizing-typography","title":"Customizing Typography","text":"<p>SJSS allows for easy customization of typography styles. You can use the SjThemeService to update the default typography settings. For example:</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-themed-component',\n  template: `\n    &lt;h3 (click)=\"updateFont()\" [sj]=\"{ bg: 'primary.main', color: 'primary.contrast', p: 2, m: 1}\"&gt;\n      Primary Themed Content\n    &lt;/h3&gt;\n  `\n})\nexport class ThemedComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateFont(): void {\n    this.sjTheme.setTypography({\n      h3: {\n        fontSize: '2rem',\n        fontWeight: 600,\n        lineHeight: 3\n      }\n    });\n  }\n}\n</code></pre> <p>\u2190 Responsive Styles | Home | Theming \u2192</p>"}]}