{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Super JSS Documentation","text":"<p>Super JSS is an innovative approach to styling in Angular applications, providing a dynamic way to handle CSS using JavaScript. If you're familiar with the concept of CSS-in-JS from the React ecosystem, Super JSS brings a similar capability to Angular, but with its own unique features and benefits.</p>"},{"location":"#what-is-super-jss","title":"What is Super JSS?","text":"<p>Super JSS stands for Super JavaScript Stylesheets, a dynamic styling solution tailored for Angular applications. It offers developers the flexibility to define styles as JavaScript objects, making it easier to adjust and apply styles conditionally based on the application's state.</p>"},{"location":"#the-philosophy-behind-super-jss","title":"The Philosophy Behind Super JSS","text":"<p>In the modern web development landscape, the need for dynamic theming and styling has become increasingly prevalent. Whether it's for user-customizable themes, dark mode, or responsive designs, developers require tools that offer both flexibility and performance. Super JSS was born out of this necessity.</p> <p>By treating styles as a dynamic part of the application logic, Super JSS empowers developers to create more interactive and responsive user experiences.</p>"},{"location":"#key-benefits","title":"Key Benefits","text":"<ul> <li> <p>Flexibility: Define styles as JavaScript objects, allowing for dynamic and conditional styling based on application state.</p> </li> <li> <p>Performance: Despite its dynamic nature, Super JSS is optimized for speed, ensuring minimal impact on application performance.</p> </li> <li> <p>Integration with Angular: Designed specifically for Angular, it integrates seamlessly, making it a natural choice for Angular developers.</p> </li> <li> <p>Developer Experience: With clear syntax and powerful features, Super JSS aims to enhance the developer experience, making styling more intuitive and less cumbersome.</p> </li> <li> <p>Responsive Styling: Super JSS offers a simple yet powerful way to define responsive styles that adapt based on the device's width.</p> </li> <li> <p>Theming: Super JSS provides a robust theming mechanism that allows for easy customization of styles.- Typography: Super JSS offers a simple way to apply predefined typography styles to your text elements.</p> </li> <li> <p>CSS Support: Super JSS supports all CSS properties, including pseudo-classes and pseudo-elements.</p> </li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Ready to dive deeper? Explore the subsequent sections to discover the powerful features of Super JSS and learn how to integrate it into your Angular projects.</p> <p>Installation - Get started with Super JSS by setting it up in your Angular project.</p> <p>Styling - Learn the basics of defining styles with Super JSS.</p> <p>Responsive Styling - Discover how to create responsive designs with ease.</p> <p>Typography - Understand how Super JSS handles typography.</p> <p>Theming - Dive deep into the theming capabilities of Super JSS.</p> <p>Examples - Check out practical examples to see Super JSS in action.</p>"},{"location":"examples/","title":"SuperJSS Examples","text":"<p>Explore various examples to understand the capabilities and usage of SuperJSS.</p>"},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>StackBlitz: Basic Usage Example</p> <p>This example demonstrates the basic usage of SuperJSS to create responsive designs.</p>"},{"location":"examples/#flex-box-responsive-demo","title":"Flex-box Responsive Demo","text":"<p>StackBlitz: Flex-box Responsive Demo</p> <p>Dive into this example to see how SuperJSS can be used in conjunction with flexbox to create responsive layouts.</p>"},{"location":"examples/#theme-handler-demo","title":"Theme Handler Demo","text":"<p>StackBlitz: Theme Handler Demo</p> <p>This demo showcases the powerful theming capabilities of SuperJSS. Learn how to override and customize themes for your application.</p> <p>\u2190 Theming | Home </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>An existing Angular project.</li> <li>Node.js and npm installed on your machine.</li> </ul>"},{"location":"installation/#installation_1","title":"Installation","text":"<p>To begin, install the Super JSS library using npm:</p> <pre><code>npm i super-jss\n</code></pre>"},{"location":"installation/#integration","title":"Integration","text":""},{"location":"installation/#1-importing-the-module","title":"1.  Importing the Module:","text":"<p>Open your app.module.ts and import the SuperJssModule.</p> <pre><code>import { SuperJssModule } from 'super-jss';\n\n@NgModule({\n  imports: [SuperJssModule],\n  ...\n})\n</code></pre> <p>\u2b05\ufe0f Previous: Welcome to Super JSS | Next: Styling \u27a1\ufe0f</p>"},{"location":"responsive-style/","title":"Responsive Styles","text":"<p>With Super JSS, you can define responsive styles that adapt based on the device's width.</p>"},{"location":"responsive-style/#simple-example","title":"Simple Example","text":"<p>Apply a responsive background color directly in your component's HTML:</p> <pre><code>&lt;div [sj]=\"{backgroundColor: {xs:'red', sm:'blue', md:'green', lg:'purple', xl:'orange'}}\"&gt;Responsive Background Color Div&lt;/div&gt;\n</code></pre> <p>In this example:</p> <ul> <li>The div will have a red background on extra small devices.</li> <li>A blue background on small devices.</li> <li>A green background on medium devices.</li> <li>A purple background on large devices.</li> <li>And an orange background on extra large devices.</li> </ul>"},{"location":"responsive-style/#advanced-example","title":"Advanced Example","text":"<p>For more intricate designs, you can define responsive styles:</p> <pre><code>// Define some styles\nconst responsiveBackgroundColor: SJssStyles = {\n  backgroundColor: {\n  xs: 'red',\n  sm: 'blue',\n  md: 'green',\n  lg: 'yellow',\n  xl: 'purple'\n  }\n};\n// Define some more styles\nconst responsiveFlexLayout: SJssStyles = {\n  display: 'flex',\n  flexDirection: {xs: 'column', md: 'row'}\n};\n</code></pre> <p>Applying these combined responsive styles in your component's HTML:</p> <pre><code>&lt;div [sj]=\"[responsiveBackgroundColor, responsiveFlexLayout]\"&gt;\n  &lt;p&gt;Advanced Styled Div&lt;/p&gt;\n  &lt;p&gt;Super-jss&lt;/p&gt;\n&lt;/p&gt;\n</code></pre> <p>With the combined styles:</p> <ul> <li>The div will have a responsive background color based on the device width.</li> <li>The div will also have a flex layout, with its direction changing from column on smaller devices to row on larger devices.</li> </ul> <p>\u2190 Styling | Home | Typography \u2192</p>"},{"location":"styling/","title":"Styling with Super JSS","text":"<p>Super JSS allows for easy and dynamic styling in Angular applications. One of the key features is that all CSS properties are camel-cased, making it intuitive and easy to remember or find.</p>"},{"location":"styling/#1-basic-styling","title":"1.  Basic Styling:","text":"<p>With Super JSS integrated, you can now apply dynamic styles directly in your Angular templates using the [sj] directive.</p> <pre><code>&lt;div [sj]=\"{backgroundColor: 'red', color:'white'}\"&gt;HELLO WORLD&lt;/div&gt;\n</code></pre>"},{"location":"styling/#2-combining-styles","title":"2.  Combining Styles:","text":"<p>Super JSS allows for combining multiple styles. This can be done by defining styles in your component and then combining them in your template.</p> <p>In your component's TypeScript:</p> <pre><code>styleOne: SJssStyles = {backgroundColor: 'red'};\nstyleTwo: SJssStyles = {color: 'white'};\n</code></pre> <p>In your component's HTML:</p> <pre><code>&lt;div [sj]=\"[styleOne, styleTwo]\"&gt;Combined Styles&lt;/div&gt;\n</code></pre>"},{"location":"styling/#3-responsive-styling","title":"3.  Responsive Styling","text":"<p>Define styles for various breakpoints to ensure responsiveness.</p> <pre><code>&lt;div [sj]=\"{backgroundColor: {xs:'red', sm:'blue', md:'green', lg:'purple', xl:'orange'}}\"&gt;RESPONSIVE DIV&lt;/div&gt;\n</code></pre> <p>\u2190 Installation | Home | Responsive Styles \u2192</p>"},{"location":"theming/","title":"Theming in SuperJSS","text":"<p>Theming is a powerful feature in SuperJSS that allows for consistent styling across your application. By defining a theme, you can ensure that components maintain a uniform appearance in line with your design guidelines. However, there are times when you might need to override these default styles. Here's how you can do it effectively and safely.</p>"},{"location":"theming/#overriding-a-theme","title":"Overriding a Theme","text":"<p>To customize your application's look and feel, you might need to override the default theme provided by SuperJSS. This process involves using the <code>SJssThemeService</code> and responsibly managing your subscriptions to prevent memory leaks.</p> <p>Here's a step-by-step guide:</p>"},{"location":"theming/#step-1-subscribing-to-theme-changes","title":"Step 1: Subscribing to Theme Changes","text":"<p>First, you need to subscribe to the theme changes in your component. This step ensures that your component stays updated with the latest theme information.</p> <pre><code>import { Component, OnDestroy } from '@angular/core';\nimport { SJssTheme, SJssThemeService } from 'superjss';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-theme-demo',\n  template: `\n    &lt;div [style.backgroundColor]=\"theme?.palette.primary.main\"&gt;\n      Themed Component\n    &lt;/div&gt;\n  `\n})\nexport class ThemeDemoComponent implements OnDestroy {\n  theme: SJssTheme | null = null;\n  private themeSubscription: Subscription;\n\n  constructor(private sjssThemeService: SJssThemeService) {\n    this.themeSubscription = this.sjssThemeService.themeChanges().subscribe((newTheme) =&gt; {\n      this.theme = newTheme;\n    });\n  }\n\n  ngOnDestroy() {\n    // Prevent memory leaks by unsubscribing when the component is destroyed\n    this.themeSubscription.unsubscribe();\n  }\n}\n</code></pre>"},{"location":"theming/#step-2-overriding-the-theme","title":"Step 2: Overriding the Theme","text":"<p>You can modify the theme's properties according to your project's requirements. Here's how you can do it:</p> <pre><code>\n\nmodifyTheme() {\n  // Clone the current theme to avoid mutating the original object\n  const updatedTheme: SJssTheme = { ...this.theme };\n\n  // Customize the theme's properties\n  updatedTheme.palette.primary.main = '#003366'; // Change the primary color\n  // ... (other modifications)\n\n  // Update the theme globally\n  this.sjssThemeService.setTheme(updatedTheme);\n}\n</code></pre>"},{"location":"theming/#step-3-unsubscribing-from-observables","title":"Step 3: Unsubscribing from Observables","text":"<p>When your component is destroyed, it's crucial to unsubscribe from the theme changes subscription. Failing to do so can lead to memory leaks, as the subscription remains active and continues to listen for changes.</p> <pre><code>// ... (inside the ThemeDemoComponent class)\n\nngOnDestroy() {\n  // Clean up the subscription to prevent memory leaks\n  this.themeSubscription.unsubscribe();\n}\n</code></pre>"},{"location":"theming/#conclusion","title":"Conclusion","text":"<p>By following these steps, you can effectively override the default theme in SuperJSS, ensuring your application adheres to your specific design requirements. Remember, responsibly managing your subscriptions by unsubscribing in the <code>ngOnDestroy</code> method is crucial to prevent memory leaks and maintain optimal performance in your Angular applications.</p> <p>\u2190 Typography | Home | Examples \u2192</p>"},{"location":"typography/","title":"Typography","text":"<p>Super JSS provides a robust theming mechanism for typography. By simply adding the <code>sj</code> directive to your HTML tags, you can apply predefined styles from the theme to your text elements. This ensures consistency and a professional look across your application.</p>"},{"location":"typography/#usage","title":"Usage","text":"<p>You can use any HTML tag from H1 to H6, P, or span, and add the <code>sj</code> directive to apply the predefined typography styles:</p> <pre><code>&lt;h1 [sj]&gt;Hello world H1&lt;/h1&gt;\n&lt;h2 [sj]&gt;Hello world H2&lt;/h2&gt;\n&lt;h3 [sj]&gt;Hello world H3&lt;/h3&gt;\n&lt;h4 [sj]&gt;Hello world H4&lt;/h4&gt;\n&lt;h5 [sj]&gt;Hello world H5&lt;/h5&gt;\n&lt;h6 [sj]&gt;Hello world H6&lt;/h6&gt;\n&lt;p [sj]&gt;Hello world P&lt;/p&gt;\n&lt;span [sj]&gt;Hello world span&lt;/span&gt;\n</code></pre> <p>These styles are defined in the SJssTheme interface under the typography property. Each tag (H1 to H6, P, span, etc.) corresponds to a specific style definition. By using the sj directive, you're telling Super JSS to apply the associated style from the theme to that tag.</p> <p>\u2190 Responsive Styles | Home | Theming \u2192</p>"}]}