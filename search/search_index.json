{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Super JSS Documentation Super JSS is an innovative approach to styling in Angular applications, providing a dynamic way to handle CSS using JavaScript. If you're familiar with the concept of CSS-in-JS from the React ecosystem, Super JSS brings a similar capability to Angular, but with its own unique features and benefits. What is Super JSS? Super JSS stands for Super JavaScript Stylesheets, a dynamic styling solution tailored for Angular applications. It offers developers the flexibility to define styles as JavaScript objects, making it easier to adjust and apply styles conditionally based on the application's state. The Philosophy Behind Super JSS In the modern web development landscape, the need for dynamic theming and styling has become increasingly prevalent. Whether it's for user-customizable themes, dark mode, or responsive designs, developers require tools that offer both flexibility and performance. Super JSS was born out of this necessity. By treating styles as a dynamic part of the application logic, Super JSS empowers developers to create more interactive and responsive user experiences. Key Benefits Flexibility : Define styles as JavaScript objects, allowing for dynamic and conditional styling based on application state. Performance : Despite its dynamic nature, Super JSS is optimized for speed, ensuring minimal impact on application performance. Integration with Angular : Designed specifically for Angular, it integrates seamlessly, making it a natural choice for Angular developers. Developer Experience : With clear syntax and powerful features, Super JSS aims to enhance the developer experience, making styling more intuitive and less cumbersome. How Does It Compare? While there are other styling solutions available, Super JSS stands out due to its focus on dynamic capabilities tailored for Angular. Its design decisions are influenced by the need for runtime theming and styling in modern web applications. For a detailed comparison with other popular libraries, check out our Comparison with Other Libraries section. Next Steps Ready to dive deeper? Explore the subsequent sections to discover the powerful features of Super JSS and learn how to integrate it into your Angular projects.","title":"Home"},{"location":"#welcome-to-super-jss-documentation","text":"Super JSS is an innovative approach to styling in Angular applications, providing a dynamic way to handle CSS using JavaScript. If you're familiar with the concept of CSS-in-JS from the React ecosystem, Super JSS brings a similar capability to Angular, but with its own unique features and benefits.","title":"Welcome to Super JSS Documentation"},{"location":"#what-is-super-jss","text":"Super JSS stands for Super JavaScript Stylesheets, a dynamic styling solution tailored for Angular applications. It offers developers the flexibility to define styles as JavaScript objects, making it easier to adjust and apply styles conditionally based on the application's state.","title":"What is Super JSS?"},{"location":"#the-philosophy-behind-super-jss","text":"In the modern web development landscape, the need for dynamic theming and styling has become increasingly prevalent. Whether it's for user-customizable themes, dark mode, or responsive designs, developers require tools that offer both flexibility and performance. Super JSS was born out of this necessity. By treating styles as a dynamic part of the application logic, Super JSS empowers developers to create more interactive and responsive user experiences.","title":"The Philosophy Behind Super JSS"},{"location":"#key-benefits","text":"Flexibility : Define styles as JavaScript objects, allowing for dynamic and conditional styling based on application state. Performance : Despite its dynamic nature, Super JSS is optimized for speed, ensuring minimal impact on application performance. Integration with Angular : Designed specifically for Angular, it integrates seamlessly, making it a natural choice for Angular developers. Developer Experience : With clear syntax and powerful features, Super JSS aims to enhance the developer experience, making styling more intuitive and less cumbersome.","title":"Key Benefits"},{"location":"#how-does-it-compare","text":"While there are other styling solutions available, Super JSS stands out due to its focus on dynamic capabilities tailored for Angular. Its design decisions are influenced by the need for runtime theming and styling in modern web applications. For a detailed comparison with other popular libraries, check out our Comparison with Other Libraries section.","title":"How Does It Compare?"},{"location":"#next-steps","text":"Ready to dive deeper? Explore the subsequent sections to discover the powerful features of Super JSS and learn how to integrate it into your Angular projects.","title":"Next Steps"},{"location":"test/","text":"SuperJssWorkspace This workspace contains the SuperJss library, a powerful tool for applying styles dynamically in Angular applications. The library provides a directive that makes it easy to bind styles to elements based on various conditions and breakpoints. Getting Started To run the entire project: ng serve This will start a development server. Navigate to http://localhost:4200/ . The app will automatically reload if you change any of the source files. Working with the SuperJss Library To work with the SuperJss library, navigate to the library's directory: cd projects/super-jss Building the Library To build the SuperJss library: ng build super-jss If you want to observe changes and rebuild the library automatically, use the --watch flag: ng build super-jss --watch Additional Commands Generate Components & More : Use ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module . Running Unit Tests : Execute ng test to run the unit tests via Karma. Running End-to-End Tests : Execute ng e2e to run the end-to-end tests. To use this command, you need to first add a package that implements end-to-end testing capabilities. Further Help For more help on the Angular CLI, use ng help or check out the Angular CLI Overview and Command Reference page.","title":"SuperJssWorkspace"},{"location":"test/#superjssworkspace","text":"This workspace contains the SuperJss library, a powerful tool for applying styles dynamically in Angular applications. The library provides a directive that makes it easy to bind styles to elements based on various conditions and breakpoints.","title":"SuperJssWorkspace"},{"location":"test/#getting-started","text":"To run the entire project: ng serve This will start a development server. Navigate to http://localhost:4200/ . The app will automatically reload if you change any of the source files.","title":"Getting Started"},{"location":"test/#working-with-the-superjss-library","text":"To work with the SuperJss library, navigate to the library's directory: cd projects/super-jss","title":"Working with the SuperJss Library"},{"location":"test/#building-the-library","text":"To build the SuperJss library: ng build super-jss If you want to observe changes and rebuild the library automatically, use the --watch flag: ng build super-jss --watch","title":"Building the Library"},{"location":"test/#additional-commands","text":"Generate Components & More : Use ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module . Running Unit Tests : Execute ng test to run the unit tests via Karma. Running End-to-End Tests : Execute ng e2e to run the end-to-end tests. To use this command, you need to first add a package that implements end-to-end testing capabilities.","title":"Additional Commands"},{"location":"test/#further-help","text":"For more help on the Angular CLI, use ng help or check out the Angular CLI Overview and Command Reference page.","title":"Further Help"}]}