{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Super JSS Library Documentation - Angular 17 Edition","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the official documentation of Super JSS for Angular 17, a revolutionary dynamic CSS library that transforms the way styles are applied in Angular applications. Inspired by the dynamic capabilities of UI libraries like Material UI and Styled Components, Super JSS brings a unique approach to Angular, a framework traditionally without such dynamic styling options. With the latest features of Angular 17, including enhanced use of signals, Super JSS offers an intuitive and powerful way to manage styles reactively.</p>"},{"location":"#what-is-super-jss","title":"What is Super JSS?","text":"<p>Super JSS (Super JavaScript Stylesheets) is a cutting-edge library that brings the power of JavaScript to the world of styling in Angular. By utilizing Angular 17's signals, it allows you to define your styles as JavaScript objects, providing a dynamic and powerful way to manage your application's appearance without the complexity of RxJS.</p>"},{"location":"#the-philosophy-behind-super-jss","title":"The Philosophy Behind Super JSS","text":"<p>Drawing from established UI frameworks, Super JSS is founded on the idea that styling should be as dynamic as the components it styles. The upgrade to Angular 17 and the streamlined use of signals make Super JSS a lean and efficient tool, perfect for creating styles that respond in real time to user interactions and application states.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Dynamic Styling with JavaScript: Create and manage styles with the full power of JavaScript, enabling dynamic and conditional styling with ease.</li> <li>Responsive Design: Effortlessly adapt your styles to different screen sizes and orientations, ensuring a consistent experience across all devices.</li> <li>Simplified Shorthand Styling: Utilize intuitive shorthand properties like p for padding, m for margin, and d: 'flex' for quick and efficient style definitions.</li> <li>Object-Based Styling: Accepts style definitions as objects, providing flexibility and power in styling.</li> <li>Seamless Theming: Switch themes on the fly, providing users with a customizable and inclusive interface.</li> <li>Enhanced Typography: Take control of your text with enhanced support for all HTML typography elements.</li> <li>Optimized Performance: Built with Angular 17 signals for a fast and smooth user experience without the overhead of RxJS.</li> </ul>"},{"location":"#lightweight-and-fast","title":"Lightweight and Fast","text":"<p>In addition to its dynamic capabilities, Super JSS is incredibly lightweight. The library's minified version is under 8KB, and the minified+gzipped version is less than 3KB, ensuring your apps remain fast and responsive without sacrificing functionality.</p>"},{"location":"#community-and-support","title":"Community and Support","text":"<p>Join the growing community of developers who are adopting Super JSS to push the boundaries of what's possible with Angular styling. Share your experiences, get support, and contribute to the project:</p> <ul> <li>Super JSS on GitHub</li> <li>Super JSS on npm</li> <li>Super JSS on StackBlitz</li> </ul>"},{"location":"#ready-to-start","title":"Ready to Start?","text":"<p>Embark on your journey to mastering Super JSS by exploring our comprehensive documentation:</p> <ul> <li>Installation Guide: Get started with the setup and integration of Super JSS into your Angular projects.</li> <li>Next steps, please refer to Super JSS on npm while this lib is updated to the latest version of angular 17</li> </ul> <p>Begin crafting beautiful, responsive, and dynamic user interfaces with unparalleled ease today.</p>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Articles by Richard on Medium</li> </ul>"},{"location":"#demos","title":"\ud83c\udfa8 Demos","text":"<ul> <li>Demo App: this Project can be seen in StackBlitz,</li> </ul>"},{"location":"#support","title":"\ud83d\udc96\u2615 Support","text":"<p>If you find Super JSS useful, consider supporting its development:</p> <ul> <li>\u2615 \u2615 \u2615 Buy me a coffee</li> <li>Support Super JSS</li> <li>Support Developer</li> </ul>"},{"location":"#contact","title":"\ud83d\udcec Contact","text":"<p>For inquiries, feedback, or issues, reach out at ricardo.santoyo@hotmail.com.</p>"},{"location":"basic-usage/","title":"Basic Usage","text":""},{"location":"basic-usage/#basic-usage","title":"Basic Usage","text":"<p>Super JSS simplifies the process of applying dynamic styles in Angular applications. Below is a guide to importing and using <code>SjDirective</code> and some basic examples to get you started.</p>"},{"location":"basic-usage/#importing-and-using-sjdirective","title":"Importing and Using <code>SjDirective</code>","text":"<ol> <li>Import the Directive:    To use Super JSS in your component, first import the <code>SjDirective</code> from the Super JSS package.</li> </ol> <p><code>typescript    import {SjDirective} from \"super-jss\";</code> 2. Apply the Directive:     Apply the <code>SjDirective</code> to the element you want to style. The directive accepts a single object or an array of objects. The object keys are the CSS properties, and the values are the responsive CSS values. The directive will automatically apply the styles to the element.</p> <p><code>typescript     @Component({       selector: 'app-demo',       template: `         &lt;div [sj]=\"{backgroundColor: '#aa5645', padding: '10px'}\"&gt;           Welcome to Super JSS!         &lt;/div&gt;       `     })     export class DemoComponent {}</code></p> <p>The div will have varying padding sizes depending on the screen width, thanks to the responsive design capabilities of Super JSS.</p> <p>This section of the documentation provides a clear and straightforward guide for developers to start using Super JSS in their Angular projects. It demonstrates the ease with which they can apply dynamic and responsive styles, highlighting the library's flexibility and power.</p>"},{"location":"examples/","title":"SuperJSS Examples","text":"<p>Explore various examples to understand the capabilities and usage of SuperJSS.</p> <ul> <li>Demo App: this Project can be seen in StackBlitz,   github repo, or deployed to superjss,:   Show typography, theme handler updating palette, fonts, and breakpoints. or github repo:</li> </ul>"},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>StackBlitz: Basic Usage Example</p> <p>This example demonstrates the basic usage of SuperJSS to create responsive designs.</p>"},{"location":"examples/#flex-box-responsive-demo","title":"Flex-box Responsive Demo","text":"<p>StackBlitz: Flex-box Responsive Demo</p> <p>This is a show case of how to create a SuperJSS SJssStyles [sj] object to create responsive flex-box layouts.</p> <p>\u2190 Theming | Home </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>An existing Angular project.</li> <li>Node.js and npm installed on your machine.</li> </ul>"},{"location":"installation/#installation_1","title":"Installation","text":"<p>To begin, install the Super JSS library using npm:</p> <pre><code>npm i super-jss\n</code></pre>"},{"location":"installation/#integration","title":"Integration","text":""},{"location":"installation/#1-importing-the-directive-in-any-component","title":"1.  Importing the Directive in any component:","text":"<pre><code>import {SjDirective} from \"super-jss\";\n@Component({\n  standalone: true,\n  selector: 'app-demo',\n  template: `\n     &lt;div [sj]=\"{backgroundColor: '#aa5645', padding: '10px'}\"&gt;\n        Welcome to Super JSS!\n      &lt;/div&gt;    \n  `\n})\nexport class DemoComponent {}\n</code></pre> <p>\u2b05\ufe0f Previous: Welcome to Super JSS | Next: Styling \u27a1\ufe0f</p>"},{"location":"responsive-style/","title":"Responsive Styling","text":""},{"location":"responsive-style/#responsive-styles-with-super-jss","title":"Responsive Styles with Super JSS","text":"<p>Super JSS simplifies the creation of responsive styles in Angular applications, allowing styles to adapt based on the device's width without the complexity of signals for style definitions.</p>"},{"location":"responsive-style/#simple-example","title":"Simple Example","text":"<p>Define responsive styles directly in your component's template using the <code>[sj]</code> directive to apply a responsive background color:</p> <pre><code>&lt;div [sj]=\"responsiveBackground\"&gt;Responsive Background Color Div&lt;/div&gt;\n</code></pre> <p>In your component's TypeScript file:</p> <pre><code>import { SJssStyles } from 'super-jss';\n\nexport class MyComponent {\n  responsiveBackground: SJssStyles = {\n    backgroundColor: {\n      xs: 'red',\n      sm: 'blue',\n      md: 'green',\n      lg: 'purple',\n      xl: 'orange'\n    }\n  };\n}\n\n</code></pre> <p>With this setup, the div will display:</p> <p>A red background on extra small devices. Blue on small devices. Green on medium devices. Purple on large devices. Orange on extra large devices.</p>"},{"location":"responsive-style/#advanced-example","title":"Advanced Example","text":"<p>For more complex responsive designs, define and combine multiple responsive styles in your TypeScript:</p> <pre><code>import { SJssStyles } from 'super-jss';\n\nexport class MyComponent {\n  responsiveBackgroundColor: SJssStyles = {\n    backgroundColor: {\n      xs: 'red',\n      sm: 'blue',\n      md: 'green',\n      lg: 'yellow',\n      xl: 'purple'\n    }\n  };\n\n  responsiveFlexLayout: SJssStyles = {\n    display: 'flex',\n    flexDirection: {\n      xs: 'column',\n      md: 'row'\n    }\n  };\n}\n\n</code></pre> <p>Applying these combined responsive styles in your component's HTML:</p> <pre><code>&lt;div [sj]=\"[responsiveBackgroundColor, responsiveFlexLayout]\"&gt;\n  &lt;p&gt;Advanced Styled Div&lt;/p&gt;\n  &lt;p&gt;Super-jss&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>With these combined styles:</p> <p>The div's background color will change responsively based on the screen width. The flex layout will switch from a column arrangement on smaller screens to a row arrangement on larger screens, providing an optimal layout across different devices.</p> <p>\u2190 Styling | Home | Typography \u2192</p>"},{"location":"theming/","title":"Theming with Super JSS","text":"<p>Super JSS provides a robust theming system that allows you to define and switch themes dynamically in your Angular applications. Theming is essential for creating consistent styling across your application and for enabling features like dark mode.</p>"},{"location":"theming/#defining-a-theme","title":"Defining a Theme","text":"<p>You can define a theme as a set of style properties that can be applied globally across your application.</p> <pre><code>import { defaultThemeConfig, SJTheme } from 'super-jss';\n\nconst myTheme: SJTheme = defaultThemeConfig();\nmyTheme.palette.primary.main = '#007bff'; // Blue\nmyTheme.palette.secondary.main = '#dc3545'; // Red\n</code></pre> <p>Applying a Theme Once you have defined a theme, you can apply it using the sjTheme.set method.</p> <pre><code>import { sjTheme } from 'super-jss';\n\n// Apply the theme globally\nsjTheme.set(myTheme);\n</code></pre>"},{"location":"theming/#conclusion","title":"Conclusion","text":"<p>By following these steps, you can effectively override the default theme in SuperJSS, ensuring your application adheres to your specific design requirements. Remember, responsibly managing your subscriptions by unsubscribing in the <code>ngOnDestroy</code> method is crucial to prevent memory leaks and maintain optimal performance in your Angular applications.</p> <p>\u2190 Typography | Home | Examples \u2192</p>"},{"location":"typography/","title":"Typography","text":"<p>Super JSS provides a robust theming mechanism for typography. By simply adding the <code>sj</code> directive to your HTML tags, you can apply predefined styles from the theme to your text elements. This ensures consistency and a professional look across your application.</p>"},{"location":"typography/#usage","title":"Usage","text":"<p>You can use any HTML tag from H1 to H6, P, or span, and add the <code>sj</code> directive to apply the predefined typography styles:</p> <pre><code>&lt;h1 [sj]=\"\"&gt;Hello world H1&lt;/h1&gt;\n&lt;h2 [sj]=\"\"&gt;Hello world H2&lt;/h2&gt;\n&lt;h3 [sj]=\"\"&gt;Hello world H3&lt;/h3&gt;\n&lt;h4 [sj]=\"\"&gt;Hello world H4&lt;/h4&gt;\n&lt;h5 [sj]=\"\"&gt;Hello world H5&lt;/h5&gt;\n&lt;h6 [sj]=\"\"&gt;Hello world H6&lt;/h6&gt;\n&lt;p [sj]=\"\"&gt;Hello world P&lt;/p&gt;\n&lt;span [sj]=\"\"&gt;Hello world span&lt;/span&gt;\n&lt;strong [sj]=\"\"&gt;Hello world span&lt;/strong&gt;\n</code></pre> <p>These styles are defined in the SJssTheme interface under the typography property. Each tag (H1 to H6, P, span, etc.) corresponds to a specific style definition. By using the sj directive, you're telling Super JSS to apply the associated style from the theme to that tag.</p> <p>\u2190 Responsive Styles | Home | Theming \u2192</p>"}]}